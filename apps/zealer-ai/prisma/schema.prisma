// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model user {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  clerkid   String   @unique
  type      String
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  stripeid String?

  domains domain[]

  campaign campaign[]

  subscription billings?
}

model domain {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  icon String

  chatbot         chatbot?
  helpdesk        helpdesk[]
  filterquestions filterquestions[]
  products        product[]

  customer   customer[]
  user       user?      @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid     String?    @db.Uuid
  campaign   campaign?  @relation(fields: [campaignid], references: [id])
  campaignid String?    @db.Uuid
}

model chatbot {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  welcomemessage String?
  icon           String?
  background     String?
  textcolor      String?
  helpdesk       Boolean @default(false)
  domain         domain? @relation(fields: [domainid], references: [id], onDelete: Cascade)
  domainid       String? @unique @db.Uuid
}

model billings {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan    plans   @default(standard)
  credits Int     @default(10)
  user    user?   @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid  String? @unique @db.Uuid
}

model helpdesk {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answer   String

  domain   domain? @relation(fields: [domainid], references: [id], onDelete: Cascade)
  domainid String? @db.Uuid
}

model filterquestions {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answered String?

  domain   domain? @relation(fields: [domainid], references: [id], onDelete: Cascade)
  domainid String? @db.Uuid
}

model customerresponses {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question   String
  answered   String?
  customer   customer @relation(fields: [customerid], references: [id], onDelete: Cascade)
  customerid String   @db.Uuid
}

model customer {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String?

  questions customerresponses[]

  chatroom chatroom[]

  booking bookings[]

  domain   domain? @relation(fields: [domainid], references: [id], onDelete: Cascade)
  domainid String? @db.Uuid
}

model chatroom {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  live       Boolean   @default(false)
  mailed     Boolean   @default(false)
  createdat  DateTime  @default(now())
  updatedat  DateTime  @updatedAt
  customer   customer? @relation(fields: [customerid], references: [id], onDelete: Cascade)
  customerid String?   @db.Uuid

  message chatmessage[]
}

model chatmessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  role       role?
  createdat  DateTime  @default(now())
  updatedat  DateTime  @updatedAt
  chatroom   chatroom? @relation(fields: [chatroomid], references: [id], onDelete: Cascade)
  chatroomid String?   @db.Uuid
  seen       Boolean   @default(false)
}

model bookings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime
  slot       String
  email      String
  customer   customer? @relation(fields: [customerid], references: [id], onDelete: Cascade)
  customerid String?   @db.Uuid
  domainid   String?   @db.Uuid
  createdat  DateTime  @default(now())
}

model campaign {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  customers String[]
  domain    domain[]
  template  String?
  user      user?    @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid    String?  @db.Uuid
  createdat DateTime @default(now())
}

model product {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  price     Int
  image     String
  createdat DateTime @default(now())
  domain    domain?  @relation(fields: [domainid], references: [id], onDelete: Cascade)
  domainid  String?  @db.Uuid
}

enum plans {
  standard
  pro
  ultimate
}

enum role {
  user
  assistant
}
